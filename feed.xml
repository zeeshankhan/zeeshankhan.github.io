<feed xmlns="http://www.w3.org/2005/Atom"> <id>https://zeeshankhan.github.io/</id><title>zeeshan's blog</title><subtitle>Here, I'll be writing about my experience (or just my notes) with Swift, Kotlin and iOS related stuff.</subtitle> <updated>2024-03-14T12:06:00+04:00</updated> <author> <name>Zeeshan Khan</name> <uri>https://zeeshankhan.github.io/</uri> </author><link rel="self" type="application/atom+xml" href="https://zeeshankhan.github.io/feed.xml"/><link rel="alternate" type="text/html" hreflang="en" href="https://zeeshankhan.github.io/"/> <generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator> <rights> © 2024 Zeeshan Khan </rights> <icon>/assets/img/favicons/favicon.ico</icon> <logo>/assets/img/favicons/favicon-96x96.png</logo> <entry><title>iOS View</title><link href="https://zeeshankhan.github.io/posts/view/" rel="alternate" type="text/html" title="iOS View" /><published>2022-02-13T13:41:10+04:00</published> <updated>2022-03-15T11:54:35+04:00</updated> <id>https://zeeshankhan.github.io/posts/view/</id> <content src="https://zeeshankhan.github.io/posts/view/" /> <author> <name>Zeeshan Khan</name> </author> <category term="Notes" /> <summary> Lifecycle Lifecycle of a UIViewController: loadView Creates the view that the controller manages. It’s only called when the view controller is created and only when done programatically. It is responsible for making the view property exist in the first place. viewDidLoad Called after the controller’s view is loaded into memory. It’s only called when the view is created. viewWillAppear It... </summary> </entry> <entry><title>Github Action for iOS</title><link href="https://zeeshankhan.github.io/posts/github-action/" rel="alternate" type="text/html" title="Github Action for iOS" /><published>2021-08-27T13:41:10+04:00</published> <updated>2021-08-27T13:41:10+04:00</updated> <id>https://zeeshankhan.github.io/posts/github-action/</id> <content src="https://zeeshankhan.github.io/posts/github-action/" /> <author> <name>Zeeshan Khan</name> </author> <category term="Article" /> <summary> To start with Github Action we need to have a repo and few test written to verify our build and test command. First let’s create a YML file in the directory .github/workflows at the root of your repository. There is a very good post on the YML file here Let’s look into the a sample github action workflow. Below workflow will build and test a Swift Package Manager name: Build My Framework #1 ... </summary> </entry> <entry><title>Swift 5.5 notes</title><link href="https://zeeshankhan.github.io/posts/swift-5-5/" rel="alternate" type="text/html" title="Swift 5.5 notes" /><published>2021-08-24T13:41:10+04:00</published> <updated>2021-08-24T13:41:10+04:00</updated> <id>https://zeeshankhan.github.io/posts/swift-5-5/</id> <content src="https://zeeshankhan.github.io/posts/swift-5-5/" /> <author> <name>Zeeshan Khan</name> </author> <category term="Notes" /> <summary> SE-2096 async, await These are the two new keywords in Swift 5.5 for funcs mostly to make them asynchronous and use it like a synchronous function. async and await is to help us avoid pyramid of doom by avoiding completion handler. Ex: func foo() async -&amp;gt; Int { 0 } await foo() When function throws Ex: func foo() async throws -&amp;gt; Int { 0 } try await foo() Synchronous functions c... </summary> </entry> <entry><title>Big O notation</title><link href="https://zeeshankhan.github.io/posts/big-o-notation/" rel="alternate" type="text/html" title="Big O notation" /><published>2021-08-23T13:41:10+04:00</published> <updated>2021-08-23T13:41:10+04:00</updated> <id>https://zeeshankhan.github.io/posts/big-o-notation/</id> <content src="https://zeeshankhan.github.io/posts/big-o-notation/" /> <author> <name>Zeeshan Khan</name> </author> <category term="Notes" /> <summary> Drop the constants Ex: Runtime $O(2N)$ will become $O(N)$ Drop the non-dominant terms Since we drop constants therefore $O(N^2 + N^2)$ becomes $O(N^2)$. If we did not care about the latter $N^2$ why would we care about single $N$, we don’t. Ex: $O(N^2 + N)$ becomes $O(N^2)$ $O(N logN)$ becomes $O(N)$ $O(5 * 2^N * 100N^9)$ becomes $O(2^N)$ but when we have two different runtime, we d... </summary> </entry> <entry><title>Codable</title><link href="https://zeeshankhan.github.io/posts/swift-codable/" rel="alternate" type="text/html" title="Codable" /><published>2021-08-22T13:41:10+04:00</published> <updated>2021-08-22T13:41:10+04:00</updated> <id>https://zeeshankhan.github.io/posts/swift-codable/</id> <content src="https://zeeshankhan.github.io/posts/swift-codable/" /> <author> <name>Zeeshan Khan</name> </author> <category term="Notes" /> <summary> Decoding enum Parsing a String value to an enum case with undefined case value to an unknown case using singleValueContainer enum Fruits: String, Decodable { case mango, banana, unknown /// If we don't implement init decoder then decoding will fail for unknown values init(from decoder: Decoder) throws { let rawValue = try decoder.singleValueContainer().decode(String.self)... </summary> </entry> </feed>
