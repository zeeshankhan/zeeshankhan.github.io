---
title: Swift 5.3 notes
date: 2021-08-20 13:41:10 +0400
categories: [Swift]
tags: [writing, swift]
---

## [SE-2076][SE-0276] Multi-pattern catch clause

```swift
do {
    //...
} catch MyError.code1, MyError.code2 {}
```

## [SE-2079][SE-0279] Multiple trailing closure
No need for small curly braces anymore.
```swift
Button {
    //...
} label {
    // ...
} action {
    // ...
}
```

## [SE-2066][SE-2066] Comparable conformance for enum
Now we can compare enum case with > or < or etc.
```swift
enum Size {
    case small
    case large
}

if Size.small < Size.large {}
```


## [SE-2081][SE-2081] @main attribute
Type based program entry point
```swift
@main 
struct MyApp {
    static main() {}
}
```
It requires a `static main` function.

## [SE-0267][SE-0267] where clause inside a generic type or extension

```swift
struct Foo<Element> {}
extension Foo {
    func jump() -> Element where Element: Comparable {}
}
```

## [SE-0280][SE-0280] enum cases as protocol matching witness

```swift
protocol Foo {
    var name: String
}

enum Zoo: Foo {
    case name
}
```

## References
- [Hacking With Swift] [https://www.hackingwithswift.com/articles/218/whats-new-in-swift-5-3]()

[SE-0276]: https://github.com/apple/swift-evolution/blob/master/proposals/0276-multi-pattern-catch-clauses.md
[SE-0279]: https://github.com/apple/swift-evolution/blob/master/proposals/0279-multiple-trailing-closures.md
[SE-2066]: https://github.com/apple/swift-evolution/blob/master/proposals/0266-synthesized-comparable-for-enumerations.md
[SE-2081]: https://github.com/apple/swift-evolution/blob/master/proposals/0281-main-attribute.md
[SE-0267]: https://github.com/apple/swift-evolution/blob/master/proposals/0267-where-on-contextually-generic.md
[SE-0280]: https://github.com/apple/swift-evolution/blob/master/proposals/0280-enum-cases-as-protocol-witnesses.md